fetch("https://apitrackline-3047cf7af332.herokuapp.com/api/auth/me", {
    credentials: "include" 
})
    .then(res => {
        if (!res.ok) throw new Error("No autorizado");
    })
    .catch(() => {
        window.location.href = "Login.html";
    });


// --- 2. Importaciones de Servicios (Actualizado para Recoleccion) ---
import { 
    createRecoleccion, 
    updateRecoleccion, // Asumimos que esta funci√≥n existe en tu servicio
    // getRecoleccionById // Puedes usarla para precargar si es necesario
} from "../Services/RecoleccionService.js"; 

document.addEventListener("DOMContentLoaded", () => {
    // --- 3. Referencias a inputs del formulario ---
    const transporteInput = document.getElementById("transporte");
    const recoleccionEntregaInput = document.getElementById("recoleccionEntrega");
    const numeroDocInput = document.getElementById("documento");
    const lugarOrigenInput = document.getElementById("lugarOrigen");
    const paisOrigenInput = document.getElementById("paisOrigen");
    const lugarDestinoInput = document.getElementById("lugarDestino");
    const paisDestinoInput = document.getElementById("paisDestino");

    // --- ID de Referencia y Persistencia ---
    const idOrdenEncabezado = localStorage.getItem("idOrdenEncabezado"); 
    // Usamos 'let' para poder actualizarlo si se crea un registro nuevo
    let idRecoleccion = localStorage.getItem("idRecoleccion"); 

    // --- Bot√≥n ---
    // üõë CR√çTICO: Aseg√∫rate de que este selector apunte al bot√≥n de Guardar/Actualizar
    const btnAddRecoleccion = document.querySelector(".accordion[data-step='4'] .buttons-form"); 

    // Regex para validar letras y espacios (con tildes y √±)
    const regexLetras = /^[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√ë√± ]+$/;

    // --- 4. Funci√≥n: Validaciones seg√∫n DTO (Se mantiene tu c√≥digo) ---
    function validateForm() {
        // [TU C√ìDIGO DE VALIDACI√ìN EXISTENTE]
        // ... (Se asume que toda la l√≥gica de validaci√≥n de campos es correcta)
        
        // numeroDoc -> m√°ximo 10
        if (!numeroDocInput.value.trim()) {
            Swal.fire({ icon: "warning", title: "Atenci√≥n", text: "Debes ingresar el n√∫mero de documento" });
            return false;
        }
        if (numeroDocInput.value.trim().length > 10) {
            Swal.fire({ icon: "warning", title: "Atenci√≥n", text: "El n√∫mero de documento no puede superar 10 caracteres" });
            return false;
        }

        // lugarOrigen
        if (!lugarOrigenInput.value.trim()) {
            Swal.fire({ icon: "warning", title: "Atenci√≥n", text: "Debes ingresar el lugar de origen" });
            return false;
        }
        if (!regexLetras.test(lugarOrigenInput.value.trim())) {
            Swal.fire({ icon: "error", title: "Error", text: "El lugar de origen solo debe contener letras y espacios" });
            return false;
        }
        if (lugarOrigenInput.value.trim().length > 50) {
            Swal.fire({ icon: "error", title: "Error", text: "El lugar de origen no puede superar 50 caracteres" });
            return false;
        }

        // paisOrigen
        if (!paisOrigenInput.value.trim()) {
            Swal.fire({ icon: "warning", title: "Atenci√≥n", text: "Debes ingresar el pa√≠s de origen" });
            return false;
        }
        if (!regexLetras.test(paisOrigenInput.value.trim())) {
            Swal.fire({ icon: "error", title: "Error", text: "El pa√≠s de origen solo debe contener letras y espacios" });
            return false;
        }
        if (paisOrigenInput.value.trim().length > 50) {
            Swal.fire({ icon: "error", title: "Error", text: "El pa√≠s de origen no puede superar 50 caracteres" });
            return false;
        }

        // lugarDestino
        if (!lugarDestinoInput.value.trim()) {
            Swal.fire({ icon: "warning", title: "Atenci√≥n", text: "Debes ingresar el lugar de destino" });
            return false;
        }
        if (!regexLetras.test(lugarDestinoInput.value.trim())) {
            Swal.fire({ icon: "error", title: "Error", text: "El lugar de destino solo debe contener letras y espacios" });
            return false;
        }
        if (lugarDestinoInput.value.trim().length > 50) {
            Swal.fire({ icon: "error", title: "Error", text: "El lugar de destino no puede superar 50 caracteres" });
            return false;
        }

        // paisDestino
        if (!paisDestinoInput.value.trim()) {
            Swal.fire({ icon: "warning", title: "Atenci√≥n", text: "Debes ingresar el pa√≠s de destino" });
            return false;
        }
        if (!regexLetras.test(paisDestinoInput.value.trim())) {
            Swal.fire({ icon: "error", title: "Error", text: "El pa√≠s de destino solo debe contener letras y espacios" });
            return false;
        }
        if (paisDestinoInput.value.trim().length > 50) {
            Swal.fire({ icon: "error", title: "Error", text: "El pa√≠s de destino no puede superar 50 caracteres" });
            return false;
        }
        
        return true;
    }

    // --- Funci√≥n auxiliar: armar JSON (A√±adiendo la FK) ---
    function buildRecoleccionData() {
        const currentIdOrdenEncabezado = localStorage.getItem("idOrdenEncabezado");
        
        const data = {
            // CR√çTICO: Incluir la Foreign Key
            idOrdenEncabezado: parseInt(currentIdOrdenEncabezado),
            
            transporte: transporteInput.checked,
            recoleccionEntrega: recoleccionEntregaInput.checked,
            numeroDoc: numeroDocInput.value.trim(),
            lugarOrigen: lugarOrigenInput.value.trim(),
            paisOrigen: paisOrigenInput.value.trim(),
            lugarDestino: lugarDestinoInput.value.trim(),
            paisDestino: paisDestinoInput.value.trim()
        };
        console.log("üì§ Enviando JSON Recolecci√≥n:", JSON.stringify(data, null, 2));
        return data;
    }

    // --- GUARDAR O ACTUALIZAR RECOLECCI√ìN ---
    if (btnAddRecoleccion) {
        btnAddRecoleccion.addEventListener("click", async (e) => {
            e.preventDefault();
            if (!validateForm()) return;

            // üõë CR√çTICO: Verificar que el Encabezado ya fue creado.
            if (!idOrdenEncabezado || idOrdenEncabezado === "null") {
                Swal.fire("Error", "Debe crear el Encabezado de la Orden primero.", "warning");
                return;
            }
            
            const data = buildRecoleccionData();
            
            // Revisa el valor actual del ID antes de la operaci√≥n
            const currentIdRecoleccion = localStorage.getItem("idRecoleccion");
            const isUpdate = currentIdRecoleccion && currentIdRecoleccion !== "null" && currentIdRecoleccion !== "undefined";
            
            const successTitle = isUpdate ? "¬°Actualizado! ‚úÖ" : "¬°Guardado! ‚úÖ";
            const successText = isUpdate ? "Recolecci√≥n actualizada correctamente" : "Recolecci√≥n guardada correctamente";

            // L√≠neas de Diagn√≥stico
            console.log("-----------------------------------------");
            console.log("M√ìDULO: RECOLECCI√ìN");
            console.log("ID de Recolecci√≥n en LocalStorage:", currentIdRecoleccion);
            console.log("¬øEs Modo Actualizaci√≥n (isUpdate)?", isUpdate);
            console.log("-----------------------------------------");
            
            try {
                let recoleccionResult;

                if (isUpdate) {
                    console.log("‚û°Ô∏è Ejecutando: updateRecoleccion (PUT/PATCH) con ID:", currentIdRecoleccion);
                    // Modo Edici√≥n: Actualizar
                    recoleccionResult = await updateRecoleccion(currentIdRecoleccion, data); 

                    // Verificaci√≥n de error de negocio (si aplica)
                    if (recoleccionResult && recoleccionResult.success === false) { 
                        throw new Error(recoleccionResult.message || "La actualizaci√≥n fall√≥ en el servidor.");
                    }
                } else {
                    console.log("‚û°Ô∏è Ejecutando: createRecoleccion (POST)");
                    // Modo Creaci√≥n: Crear y guardar el nuevo ID
                    recoleccionResult = await createRecoleccion(data);
                    
                    // CR√çTICO: Verifica que el ID fue devuelto
                    if (recoleccionResult && recoleccionResult.data && recoleccionResult.data.idRecoleccion) {
                        // Inserci√≥n exitosa: Guardar el nuevo ID para futuras actualizaciones
                        idRecoleccion = recoleccionResult.data.idRecoleccion; // Actualiza la variable local
                        localStorage.setItem("idRecoleccion", idRecoleccion);
                         console.log("‚úÖ Nuevo ID de Recolecci√≥n guardado en LocalStorage:", idRecoleccion);
                    } else {
                        // Inserci√≥n fallida: Forzar el catch si el ID no vino
                        const serverMessage = recoleccionResult ? (recoleccionResult.message || JSON.stringify(recoleccionResult)) : "Respuesta de la API vac√≠a o inv√°lida.";
                        throw new Error("No se pudo insertar Recolecci√≥n. Mensaje del servidor: " + serverMessage);
                    }
                }

                // Muestra el √©xito directamente, sin pedir confirmaci√≥n previa
                Swal.fire({
                    icon: "success",
                    title: "Informaci√≥n de Recolecci√≥n guardada correctamente",
                    timer: 1500,
                    showConfirmButton: false,
                })
                
            } catch (error) {
                console.error("‚ùå Error al guardar/actualizar Recolecci√≥n:", error);
                Swal.fire({ 
                    icon: "error", 
                    title: "Error", 
                    text: error.message || "Hubo un problema al guardar Recolecci√≥n." 
                });
            }
        });
    }
});